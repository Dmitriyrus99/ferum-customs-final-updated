# rename_doctypes.py ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ DocType-–æ–≤
# v2: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Å–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ ("ServiceObject" ‚Üí "service_object")
#   —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º CamelCase –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –∫–ª–∞—Å—Å–æ–≤.

#!/usr/bin/env python3
"""
rename_doctypes.py ‚Äì –º–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ DocType-–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ Frappe / ERPNext.

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ 2
==================
1. **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤** doctype –∏–∑ CamelCase –≤ snake_case.
2. **–ü—Ä–∞–≤–∫–∞ JSON**: –ø–æ–ª–µ `name` –∏ –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ DocType.
3. **–ü—Ä–∞–≤–∫–∞ JS**: `frappe.ui.form.on('DocType', ...)` –∏ –ª—é–±—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏.
4. **–ü—Ä–∞–≤–∫–∞ PY/JS/JSON/YAML/MD/HTML**: –∑–∞–º–µ–Ω—è–µ—Ç *—Å—Ç—Ä–æ–∫–æ–≤—ã–µ* –≤—Ö–æ–∂–¥–µ–Ω–∏—è "ServiceObject" ‚Üí "service_object"
   (–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ DocType-—ã), –Ω–æ **–Ω–µ** —Ç—Ä–æ–≥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è `class ServiceObject(Document):`.
5. –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç: —Å–∫–æ–ª—å–∫–æ –∑–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Å–∫–æ–ª—å–∫–æ CamelCase –æ—Å—Ç–∞–ª–æ—Å—å.
6. –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ `*.bak` ‚Äì –æ—Ç–∫–∞—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω.

–ó–∞–ø—É—Å–∫:
    python3 rename_doctypes.py --app-path ./apps/ferum_customs [--fix-refs]

–ü–∞—Ä–∞–º–µ—Ç—Ä `--fix-refs` –≤–∫–ª—é—á–∞–µ—Ç —à–∞–≥ 4. –ë–µ–∑ –Ω–µ–≥–æ —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∏ –∏
"–≥–æ–ª–æ–≤—É" DocType-–∞ (—à–∞–≥–∏ 1‚Äì3) ‚Äì –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π —Ä–µ–∂–∏–º –≤—ã —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏.
"""

import argparse, json, os, re, shutil, sys
from pathlib import Path
from typing import Dict, List, Tuple

# –ö–∞—Ä—Ç–∞ CamelCase ‚Üí snake_case –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö DocTypes
MAPPING: Dict[str, str] = {
    "ServiceObject": "service_object",
    "ServiceReport": "service_report",
    "ServiceProject": "service_project",
    "PayrollEntryCustom": "payroll_entry_custom",
    "CustomAttachment": "custom_attachment",
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö/–∫–æ–¥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, –≥–¥–µ –∏—â–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
TEXT_SUFFIXES = {".py", ".js", ".json", ".yml", ".yaml", ".md", ".html", ".txt"}

###############################################################################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
###############################################################################

def backup(file: Path):
    """–°–æ–∑–¥–∞—ë—Ç .bak-–∫–æ–ø–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º"""
    if file.exists():
        bak = file.with_suffix(file.suffix + ".bak")
        if not bak.exists():
            shutil.copy2(file, bak)


def rename_directory(old_dir: Path, new_dir: Path):
    if old_dir.exists() and not new_dir.exists():
        print(f"‚Üí –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ {old_dir.name} ‚Üí {new_dir.name}")
        old_dir.rename(new_dir)
    else:
        print(f"‚úì –ö–∞—Ç–∞–ª–æ–≥ {new_dir.name} —É–∂–µ –≤ snake_case –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


def patch_json(json_path: Path, new_name: str):
    if not json_path.exists():
        return 0
    backup(json_path)
    text = json_path.read_text("utf-8")
    patched = re.sub(r'"name"\s*:\s*"[^"]+"', f'"name": "{new_name}"', text)
    if patched != text:
        json_path.write_text(patched, "utf-8")
        print(f"  ‚Ä¢ –û–±–Ω–æ–≤–∏–ª name –≤ {json_path.name}")
        return 1
    return 0


def patch_js_controller(js_path: Path, new_name: str):
    if not js_path.exists():
        return 0
    backup(js_path)
    text = js_path.read_text("utf-8")
    patched = re.sub(r"frappe\\.ui\\.form\\.on\\(['\"]([A-Za-z0-9_]+)['\"]",
                     f"frappe.ui.form.on('{new_name}'", text)
    if patched != text:
        js_path.write_text(patched, "utf-8")
        print(f"  ‚Ä¢ –û–±–Ω–æ–≤–∏–ª ui.form.on –≤ {js_path.name}")
        return 1
    return 0


def replace_string_refs(path: Path, pairs: List[Tuple[str, str]]):
    """–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ CamelCase ‚Üí snake_case –≤–Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤."""
    try:
        text = path.read_text("utf-8")
    except (UnicodeDecodeError, FileNotFoundError):
        return 0

    original = text
    for old, new in pairs:
        # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫ '...' –∏–ª–∏ "..."
        pattern = re.compile(rf"(['\"])({old})(['\"])")
        text = pattern.sub(rf"\1{new}\3", text)
    if text != original:
        backup(path)
        path.write_text(text, "utf-8")
        return 1
    return 0


def scan_repo(root: Path, patterns: List[str]) -> Dict[str, int]:
    counts = {p: 0 for p in patterns}
    for path in root.rglob('*'):
        if path.suffix not in TEXT_SUFFIXES:
            continue
        try:
            txt = path.read_text("utf-8")
        except UnicodeDecodeError:
            continue
        for pat in patterns:
            counts[pat] += txt.count(pat)
    return counts

###############################################################################
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
###############################################################################

def main():
    ap = argparse.ArgumentParser(description="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ DocType-–æ–≤ –≤ snake_case")
    ap.add_argument('--app-path', required=True, help='–ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    ap.add_argument('--fix-refs', action='store_true', help='–ó–∞–º–µ–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ')
    args = ap.parse_args()

    app_root = Path(args.app_path).resolve()
    print(f"Doctypes root search in: {app_root}\n")

    try:
        doctype_root = next(app_root.rglob('doctype'))
    except StopIteration:
        sys.exit('‚ùå  –ö–∞—Ç–∞–ª–æ–≥ doctype –Ω–µ –Ω–∞–π–¥–µ–Ω')

    # === –®–∞–≥–∏ 1‚Äì3 ============================================================
    for old, new in MAPPING.items():
        old_dir = doctype_root / old
        new_dir = doctype_root / new

        rename_directory(old_dir, new_dir)

        # –§–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
        json_path = new_dir / f"{new}.json"
        js_path   = new_dir / f"{new}.js"

        patch_json(json_path, new)
        patch_js_controller(js_path, new)

    # === –®–∞–≥ 4: –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫ =======================================
    total_files_changed = 0
    if args.fix_refs:
        print("\nüîÑ  –ó–∞–º–µ–Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É‚Ä¶")
        mapping_pairs = list(MAPPING.items())
        for path in app_root.rglob('*'):
            if path.suffix not in TEXT_SUFFIXES:
                continue
            total_files_changed += replace_string_refs(path, mapping_pairs)
        print(f"  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files_changed}")

    # === –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç ======================================================
    print("\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è CamelCase-–≤—Ö–æ–∂–¥–µ–Ω–∏—è (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–æ–∫):")
    counts = scan_repo(app_root, list(MAPPING.keys()))
    for pat, cnt in counts.items():
        print(f"  {pat:20s}: {cnt}")

    if args.fix_refs and total_files_changed:
        print("\n‚úÖ  –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ `bench migrate && bench build`.\n")
    else:
        print("\n‚ÑπÔ∏è  –î–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --fix-refs, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏.")

###############################################################################
if __name__ == '__main__':
    main()
